// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders when in edit mode 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <EditableInput
    value="Hello"
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <input
          className="value"
          onChange={[Function]}
          type="text"
          value="Hello"
/>,
        <input
          className="save-button"
          onClick={[Function]}
          type="button"
          value="Save"
/>,
        <input
          className="cancel-button"
          onClick={[Function]}
          type="button"
          value="Cancel"
/>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "className": "value",
          "onChange": [Function],
          "type": "text",
          "value": "Hello",
        },
        "ref": null,
        "rendered": null,
        "type": "input",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "className": "save-button",
          "onClick": [Function],
          "type": "button",
          "value": "Save",
        },
        "ref": null,
        "rendered": null,
        "type": "input",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "className": "cancel-button",
          "onClick": [Function],
          "type": "button",
          "value": "Cancel",
        },
        "ref": null,
        "rendered": null,
        "type": "input",
      },
    ],
    "type": "span",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <input
            className="value"
            onChange={[Function]}
            type="text"
            value="Hello"
/>,
          <input
            className="save-button"
            onClick={[Function]}
            type="button"
            value="Save"
/>,
          <input
            className="cancel-button"
            onClick={[Function]}
            type="button"
            value="Cancel"
/>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "value",
            "onChange": [Function],
            "type": "text",
            "value": "Hello",
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "save-button",
            "onClick": [Function],
            "type": "button",
            "value": "Save",
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "cancel-button",
            "onClick": [Function],
            "type": "button",
            "value": "Cancel",
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
      ],
      "type": "span",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`renders when in show mode 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <EditableInput
    value="Hello"
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        "Hello",
        <input
          className="edit-button"
          onClick={[Function]}
          type="button"
          value="Edit"
/>,
      ],
    },
    "ref": null,
    "rendered": Array [
      "Hello",
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "className": "edit-button",
          "onClick": [Function],
          "type": "button",
          "value": "Edit",
        },
        "ref": null,
        "rendered": null,
        "type": "input",
      },
    ],
    "type": "span",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          "Hello",
          <input
            className="edit-button"
            onClick={[Function]}
            type="button"
            value="Edit"
/>,
        ],
      },
      "ref": null,
      "rendered": Array [
        "Hello",
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "edit-button",
            "onClick": [Function],
            "type": "button",
            "value": "Edit",
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
      ],
      "type": "span",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
